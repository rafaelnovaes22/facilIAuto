name: CarMatch XP CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run regression tests daily at 2 AM
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'
  REDIS_VERSION: '7'

jobs:
  # Pre-commit validation
  pre-commit-checks:
    name: Pre-commit Quality Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Lint check
        run: |
          cd backend && npm run lint
          cd ../frontend && npm run lint

      - name: Type check
        run: |
          cd backend && npm run type-check
          cd ../frontend && npm run type-check

      - name: Security audit
        run: |
          cd backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

  # TDD Unit Tests - Fast feedback loop
  unit-tests:
    name: TDD Unit Tests
    runs-on: ubuntu-latest
    needs: pre-commit-checks
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.component }}/package-lock.json'

      - name: Install dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Run unit tests with coverage
        run: cd ${{ matrix.component }} && npm run test:unit -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.component }}/coverage
          flags: ${{ matrix.component }}-unit
          name: ${{ matrix.component }}-unit-coverage

      - name: Coverage threshold check
        run: |
          cd ${{ matrix.component }}
          npm run test:coverage-check

  # Integration Tests - Database and API
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Wait for services
        run: |
          # Wait for MongoDB
          timeout 60s bash -c 'until nc -z localhost 27017; do sleep 1; done'
          # Wait for Redis
          timeout 60s bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Run database migrations
        run: cd backend && npm run db:migrate
        env:
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/carmatch_test?authSource=admin
          REDIS_URL: redis://localhost:6379

      - name: Seed test data
        run: cd backend && npm run db:seed:test
        env:
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/carmatch_test?authSource=admin
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/carmatch_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: backend/test-results/

  # Build and Test Frontend
  frontend-build:
    name: Frontend Build & Component Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run component tests
        run: cd frontend && npm run test:component
        env:
          CI: true

      - name: Build application
        run: cd frontend && npm run build

      - name: Validate build output
        run: |
          cd frontend
          # Check if build exists and has reasonable size
          if [ ! -d "dist" ]; then
            echo "Build directory not found"
            exit 1
          fi
          
          # Check bundle size (should be under 2MB)
          BUILD_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=2097152  # 2MB in bytes
          
          if [ $BUILD_SIZE -gt $MAX_SIZE ]; then
            echo "Build size ($BUILD_SIZE bytes) exceeds maximum ($MAX_SIZE bytes)"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # E2E Tests - Critical user journeys
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, frontend-build]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Start backend server
        run: |
          cd backend
          npm run build
          npm start &
          # Wait for server to be ready
          timeout 60s bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
        env:
          NODE_ENV: test
          PORT: 5000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/carmatch_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Start frontend server
        run: |
          cd frontend
          npm run preview -- --port 3000 &
          # Wait for frontend to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          browser: chrome
          headless: true
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_API_URL: http://localhost:5000/api/v1

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots-videos
          path: |
            frontend/cypress/screenshots/
            frontend/cypress/videos/

  # Performance Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          cd performance-tests
          k6 run --out json=results.json load-test.js
        env:
          BASE_URL: ${{ secrets.STAGING_URL || 'http://localhost:5000' }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-tests/results.json

  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: pre-commit-checks

    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deploy to Staging (XP: Continuous Deployment)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, code-quality]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.carmatch.com

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy to staging
        run: |
          # Deploy using your preferred method (Vercel, Netlify, AWS, etc.)
          echo "Deploying to staging environment..."
          # ./scripts/deploy-staging.sh
        env:
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

      - name: Run smoke tests on staging
        run: |
          # Basic smoke tests to verify deployment
          curl -f https://staging-api.carmatch.com/health
          curl -f https://staging.carmatch.com

      - name: Notify team of staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 CarMatch deployed to staging successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production (XP: Frequent releases)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, code-quality, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://carmatch.com

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # ./scripts/deploy-production.sh
        env:
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: Run production health checks
        run: |
          # Comprehensive health checks
          curl -f https://api.carmatch.com/health
          curl -f https://carmatch.com
          
          # Check critical endpoints
          curl -f https://api.carmatch.com/api/v1/cars/health
          curl -f https://api.carmatch.com/api/v1/recommendations/health

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## 🚀 CarMatch Release v${{ github.run_number }}
            
            ### Changes in this release:
            ${{ github.event.head_commit.message }}
            
            ### Test Results:
            - ✅ Unit tests passed
            - ✅ Integration tests passed
            - ✅ E2E tests passed
            - ✅ Security scan passed
            - ✅ Performance tests passed
            
            ### Deployment:
            - 🔄 Deployed to production at $(date)
            - 🌐 Available at https://carmatch.com

      - name: Notify team of production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🎉 CarMatch v${{ github.run_number }} deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability (XP: Courage to make changes)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    
    steps:
      - name: Rollback to previous version
        run: |
          echo "Rolling back to previous stable version..."
          # ./scripts/rollback.sh
        env:
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

  # Continuous monitoring (XP: Feedback)
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Setup monitoring alerts
        run: |
          # Configure monitoring and alerting
          echo "Setting up post-deployment monitoring..."

      - name: Performance baseline check
        run: |
          # Check if performance is within acceptable limits
          echo "Validating performance metrics..."

# XP Practice: Daily regression tests
  daily-regression:
    name: Daily Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v4

      - name: Run comprehensive regression suite
        run: |
          echo "Running daily regression tests..."
          # Full test suite including edge cases

      - name: Generate regression report
        run: |
          echo "Generating regression report..."

      - name: Notify team of regression results
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "📊 Daily regression test results",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "All tests passed ✅",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
