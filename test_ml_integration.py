#!/usr/bin/env python3
"""
Script para testar integra√ß√£o completa do ML com sistema existente
"""

import asyncio
import json
from datetime import datetime

# Importar tudo que j√° temos
from app.ml_mvp_processor import get_hybrid_processor
from app.models import QuestionarioBusca
from app.database import get_carros


def test_ml_integration():
    """
    Testa integra√ß√£o completa
    """
    print("=" * 60)
    print("üöÄ TESTE DE INTEGRA√á√ÉO ML + SISTEMA EXISTENTE")
    print("=" * 60)
    
    # 1. Inicializar processador h√≠brido
    print("\n1Ô∏è‚É£ Inicializando processador h√≠brido...")
    processor = get_hybrid_processor()
    
    # 2. Verificar status
    print("\n2Ô∏è‚É£ Verificando status do sistema...")
    stats = processor.get_comprehensive_stats()
    
    print(f"   ML Treinado: {'‚úÖ' if stats['system_status']['ml_trained'] else '‚ùå'}")
    print(f"   Amostras coletadas: {stats['system_status']['total_training_samples']}")
    print(f"   Pronto para treinar: {'‚úÖ' if stats['system_status']['ready_to_train'] else '‚ùå'}")
    print(f"   Peso do ML: {stats['system_status']['ml_weight']:.0%}")
    
    # 3. Buscar carros para teste
    print("\n3Ô∏è‚É£ Buscando carros para teste...")
    carros = get_carros()[:5]  # Testar com 5 carros
    print(f"   Encontrados {len(carros)} carros")
    
    # 4. Criar question√°rio de teste
    print("\n4Ô∏è‚É£ Criando question√°rio de teste...")
    questionario = QuestionarioBusca(
        # Campos obrigat√≥rios
        marca_preferida="Toyota",
        modelo_especifico="Corolla",
        urgencia="ate_15_dias",
        regiao="S√£o Paulo",
        uso_principal=["urbano", "familia"],
        pessoas_transportar=5,
        espaco_carga="medio",
        potencia_desejada="media",
        prioridade="equilibrio",
        # Campos opcionais
        orcamento_min=50000,
        orcamento_max=100000,
        criancas=True,
        animais=False
    )
    print(f"   Uso principal: {questionario.uso_principal}")
    print(f"   Or√ßamento: R$ {questionario.orcamento_max:,.2f}" if questionario.orcamento_max else "   Or√ßamento: N√£o definido")
    
    # 5. Processar recomenda√ß√µes
    print("\n5Ô∏è‚É£ Processando recomenda√ß√µes com sistema h√≠brido...")
    print("-" * 60)
    
    resultados = []
    for i, carro in enumerate(carros, 1):
        print(f"\n   Carro {i}: {carro.get('marca')} {carro.get('modelo')} {carro.get('ano')}")
        
        # Processar com sistema h√≠brido
        resultado = processor.processar_recomendacao_completa(
            carro=carro,
            questionario=questionario,
            conversation_id=f"test_{datetime.now().timestamp()}",
            user_session_id="test_session",
            collect_data=True
        )
        
        # Exibir resultados
        print(f"   ‚îú‚îÄ Score Final: {resultado['score']:.2f}")
        print(f"   ‚îú‚îÄ Confian√ßa: {resultado['confidence']:.0%}")
        print(f"   ‚îú‚îÄ M√©todo: {resultado['method']}")
        
        if resultado['components']:
            print(f"   ‚îú‚îÄ Componentes:")
            print(f"   ‚îÇ  ‚îú‚îÄ Busca: {resultado['components']['busca_score']:.2f}")
            print(f"   ‚îÇ  ‚îú‚îÄ Uso: {resultado['components']['uso_score']:.2f}")
            print(f"   ‚îÇ  ‚îú‚îÄ Regras: {resultado['components']['rule_score']:.2f}")
            if resultado['components']['ml_score']:
                print(f"   ‚îÇ  ‚îî‚îÄ ML: {resultado['components']['ml_score']:.2f}")
        
        if resultado['explanations']['principais']:
            print(f"   ‚îî‚îÄ Raz√µes: {', '.join(resultado['explanations']['principais'][:2])}")
        
        resultados.append(resultado)
    
    # 6. Simular feedback de usu√°rio
    print("\n\n6Ô∏è‚É£ Simulando feedback de usu√°rio...")
    
    # Simular que o usu√°rio gostou do primeiro e terceiro carro
    if len(carros) >= 3:
        # Like no primeiro
        processor.collector.collect_from_conversation(
            conversation_id=f"test_{datetime.now().timestamp()}",
            user_session_id="test_user_123",
            carro=carros[0],
            score=resultados[0]['score'],
            user_action="like"
        )
        print(f"   ‚úÖ Feedback 'like' para {carros[0].get('modelo')}")
        
        # Contact no terceiro
        processor.collector.collect_from_conversation(
            conversation_id=f"test_{datetime.now().timestamp()}",
            user_session_id="test_user_123",
            carro=carros[2],
            score=resultados[2]['score'],
            user_action="contact"
        )
        print(f"   ‚úÖ Feedback 'contact' para {carros[2].get('modelo')}")
    
    # 7. Verificar coleta de dados
    print("\n7Ô∏è‚É£ Verificando coleta de dados para ML...")
    new_stats = processor.get_comprehensive_stats()
    new_samples = new_stats['system_status']['total_training_samples']
    
    print(f"   Total de amostras agora: {new_samples}")
    if new_stats['system_status']['ready_to_train']:
        print("   ‚úÖ Pronto para treinar modelo ML!")
        
        # 8. Tentar treinar modelo (se houver dados suficientes)
        print("\n8Ô∏è‚É£ Tentando treinar modelo ML...")
        success = processor.treinar_modelo_com_feedback()
        
        if success:
            print("   ‚úÖ Modelo treinado com sucesso!")
            print(f"   Novo peso do ML: {processor.ml_weight:.0%}")
        else:
            print("   ‚ö†Ô∏è Treinamento ainda n√£o poss√≠vel (dados insuficientes)")
    else:
        samples_needed = new_stats['next_training']['samples_needed']
        print(f"   ‚è≥ Ainda faltam {samples_needed} amostras para treinar")
    
    # 9. Testar novamente ap√≥s treinamento (se aplic√°vel)
    if processor.ml_model.is_trained:
        print("\n9Ô∏è‚É£ Testando com modelo ML treinado...")
        
        # Processar um carro novamente
        if carros:
            resultado_ml = processor.processar_recomendacao_completa(
                carro=carros[0],
                questionario=questionario,
                conversation_id=f"test_ml_{datetime.now().timestamp()}",
                collect_data=False
            )
            
            print(f"   Carro: {carros[0].get('marca')} {carros[0].get('modelo')}")
            print(f"   Score com ML: {resultado_ml['score']:.2f}")
            print(f"   M√©todo: {resultado_ml['method']}")
            
            if resultado_ml.get('metadata', {}).get('ml_weight'):
                print(f"   Peso ML aplicado: {resultado_ml['metadata']['ml_weight']:.0%}")
    
    # 10. Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DA INTEGRA√á√ÉO")
    print("=" * 60)
    
    final_stats = processor.get_comprehensive_stats()
    
    print(f"""
    Sistema H√≠brido ML + Regras:
    ‚îú‚îÄ Status: {'‚úÖ Ativo' if final_stats['system_status']['ml_trained'] else '‚è≥ Em treinamento'}
    ‚îú‚îÄ Total de amostras: {final_stats['system_status']['total_training_samples']}
    ‚îú‚îÄ Peso do ML: {final_stats['system_status']['ml_weight']:.0%}
    ‚îú‚îÄ Componentes ativos:
    ‚îÇ  ‚îú‚îÄ Memory Manager: {final_stats['components_health']['memory_manager']}
    ‚îÇ  ‚îú‚îÄ Uso Matcher: {final_stats['components_health']['uso_matcher']}
    ‚îÇ  ‚îú‚îÄ ML Model: {final_stats['components_health']['ml_model']}
    ‚îÇ  ‚îî‚îÄ Collector: {final_stats['components_health']['collector']}
    ‚îî‚îÄ Pr√≥ximo treinamento em: {final_stats['next_training']['estimated_time']}
    """)
    
    print("\n‚úÖ Teste de integra√ß√£o conclu√≠do com sucesso!")
    print("=" * 60)


if __name__ == "__main__":
    try:
        test_ml_integration()
    except Exception as e:
        print(f"\n‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()