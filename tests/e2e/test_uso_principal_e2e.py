"""
Testes E2E para Crit√©rios de Uso Principal do Ve√≠culo
Seguindo metodologia XP (Extreme Programming) com TDD

Este m√≥dulo testa a funcionalidade completa de uso principal:
- Interface melhorada do question√°rio
- Sistema de scoring avan√ßado  
- Agente especializado do chatbot
- Integra√ß√£o ponta-a-ponta
"""

import asyncio
import json
from typing import Any, Dict

import pytest
from playwright.async_api import Page, expect

# Markers para categoriza√ß√£o dos testes XP
pytestmark = [pytest.mark.e2e, pytest.mark.uso_principal, pytest.mark.requires_browser]


class TestUsoMrincipalE2E:
    """
    Classe de testes E2E para uso principal seguindo metodologia XP

    Princ√≠pios XP aplicados:
    - Test-Driven Development (TDD)
    - Testes pequenos e focados
    - Feedback r√°pido
    - Integra√ß√£o cont√≠nua
    """

    @pytest.mark.asyncio
    async def test_interface_uso_principal_melhorada(self, page: Page, live_server):
        """
        Testa a interface melhorada do question√°rio de uso principal

        TDD: Este teste valida a nova interface com cards informativos
        """
        # Given: Usu√°rio acessa a p√°gina de busca
        await page.goto(f"{live_server}/")

        # When: Navega at√© a se√ß√£o de uso principal
        await page.click('button:has-text("Come√ßar Busca")')

        # Aguardar carregamento
        await page.wait_for_selector("#step4", state="visible", timeout=10000)

        # Then: Deve ver a interface melhorada com cards
        # Verificar se os cards informativos est√£o presentes

        # Card Urbano
        urbano_card = page.locator("text=üèôÔ∏è Uso Urbano (Cidade)")
        await expect(urbano_card).to_be_visible()

        urbano_desc = page.locator(
            "text=Ideal para: tr√¢nsito, estacionamento, economia de combust√≠vel"
        )
        await expect(urbano_desc).to_be_visible()

        urbano_prioriza = page.locator(
            "text=Priorizamos: carros compactos, baixo consumo, tecnologia de assist√™ncia"
        )
        await expect(urbano_prioriza).to_be_visible()

        # Card Viagem
        viagem_card = page.locator("text=üõ£Ô∏è Viagens Longas")
        await expect(viagem_card).to_be_visible()

        viagem_desc = page.locator("text=Ideal para: rodovias, conforto, seguran√ßa")
        await expect(viagem_desc).to_be_visible()

        # Card Trabalho
        trabalho_card = page.locator("text=üíº Trabalho/Neg√≥cios")
        await expect(trabalho_card).to_be_visible()

        trabalho_desc = page.locator(
            "text=Ideal para: uso profissional, transporte de equipamentos"
        )
        await expect(trabalho_desc).to_be_visible()

        # Card Fam√≠lia
        familia_card = page.locator("text=üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Uso Familiar")
        await expect(familia_card).to_be_visible()

        familia_desc = page.locator("text=Ideal para: fam√≠lia, crian√ßas, seguran√ßa")
        await expect(familia_desc).to_be_visible()

        print("‚úÖ Interface melhorada de uso principal validada")

    @pytest.mark.asyncio
    async def test_selecao_multipla_uso_principal(self, page: Page, live_server):
        """
        Testa sele√ß√£o m√∫ltipla de tipos de uso

        TDD: Valida que usu√°rio pode selecionar m√∫ltiplos usos
        """
        # Given: Usu√°rio na p√°gina de uso principal
        await page.goto(f"{live_server}/")
        await page.click('button:has-text("Come√ßar Busca")')
        await page.wait_for_selector("#step4", state="visible")

        # When: Seleciona m√∫ltiplos tipos de uso
        await page.check("#uso_urbano")
        await page.check("#uso_familia")
        await page.check("#uso_viagem")

        # Then: Todas as sele√ß√µes devem estar ativas
        await expect(page.locator("#uso_urbano")).to_be_checked()
        await expect(page.locator("#uso_familia")).to_be_checked()
        await expect(page.locator("#uso_viagem")).to_be_checked()

        # Trabalho n√£o selecionado
        await expect(page.locator("#uso_trabalho")).not_to_be_checked()

        print("‚úÖ Sele√ß√£o m√∫ltipla de uso validada")

    @pytest.mark.asyncio
    async def test_fluxo_completo_com_uso_principal(self, page: Page, live_server):
        """
        Testa fluxo completo de busca com novos crit√©rios de uso

        TDD: Valida integra√ß√£o completa do sistema
        """
        # Given: Usu√°rio inicia busca completa
        await page.goto(f"{live_server}/")
        await page.click('button:has-text("Come√ßar Busca")')

        # Step 1: Marca/Modelo (mantendo simples)
        await page.fill("#marca_preferida", "Toyota")
        await page.fill("#modelo_especifico", "Corolla")
        await page.click('button:has-text("Pr√≥ximo")')

        # Step 2: Urg√™ncia
        await page.wait_for_selector("#urgencia")
        await page.select_option("#urgencia", "sem_pressa")
        await page.click('button:has-text("Pr√≥ximo")')

        # Step 3: Regi√£o
        await page.wait_for_selector("#regiao")
        await page.fill("#regiao", "S√£o Paulo")
        await page.click('button:has-text("Pr√≥ximo")')

        # Step 4: Uso Principal (foco do teste)
        await page.wait_for_selector("#step4", state="visible")

        # When: Seleciona uso urbano e familiar
        await page.check("#uso_urbano")
        await page.check("#uso_familia")
        await page.click('button:has-text("Pr√≥ximo")')

        # Continue com outros steps rapidamente
        # Step 5: Fam√≠lia
        await page.wait_for_selector("#pessoas_transportar")
        await page.fill("#pessoas_transportar", "4")
        await page.click('button:has-text("Pr√≥ximo")')

        # Step 6: Espa√ßo e Pot√™ncia
        await page.wait_for_selector("#espaco_carga")
        await page.select_option("#espaco_carga", "medio")
        await page.select_option("#potencia_desejada", "economica")
        await page.click('button:has-text("Pr√≥ximo")')

        # Step 7: Prioridade
        await page.wait_for_selector("#prioridade")
        await page.select_option("#prioridade", "equilibrio")
        await page.click('button:has-text("Buscar Carros")')

        # Then: Deve processar e mostrar resultados
        # Aguardar processamento (pode demorar devido ao LangGraph)
        await page.wait_for_selector("#loading", state="visible", timeout=5000)
        await page.wait_for_selector("#results", state="visible", timeout=30000)

        # Verificar se resultados incluem crit√©rios de uso principal
        results_content = await page.text_content("#results")

        # Deve mencionar uso urbano ou familiar
        assert any(
            termo in results_content.lower()
            for termo in ["urbano", "familiar", "fam√≠lia"]
        ), "Resultados devem incluir refer√™ncias ao uso principal"

        print("‚úÖ Fluxo completo com uso principal validado")

    @pytest.mark.asyncio
    async def test_chatbot_agente_uso_principal(self, page: Page, live_server):
        """
        Testa o novo agente de uso principal do chatbot

        TDD: Valida funcionamento do agente especializado
        """
        # Given: Usu√°rio em uma p√°gina de carro
        await page.goto(f"{live_server}/carro/1")  # Assumindo que carro ID 1 existe

        # Aguardar carregamento da p√°gina
        await page.wait_for_selector(".chatbot-widget", timeout=10000)

        # When: Abre o chatbot
        await page.click(".chatbot-widget")
        await page.wait_for_selector("#chatbot-expanded", state="visible")

        # Faz pergunta sobre adequa√ß√£o de uso
        pergunta_uso = "Este carro √© adequado para uso urbano e familiar?"
        await page.fill("#chatbot-input", pergunta_uso)
        await page.click("#chatbot-send")

        # Then: Deve receber resposta do agente de uso principal
        # Aguardar resposta (pode demorar devido ao LangGraph)
        await page.wait_for_selector(".chatbot-message.bot", timeout=30000)

        # Verificar se a resposta cont√©m an√°lise de uso principal
        resposta = await page.text_content(".chatbot-message.bot:last-child")

        # Deve conter elementos do agente de uso principal
        uso_keywords = ["uso urbano", "uso familiar", "adequado", "ideal", "recomend"]
        assert any(
            keyword in resposta.lower() for keyword in uso_keywords
        ), f"Resposta deve conter an√°lise de uso principal. Resposta: {resposta}"

        # Pode conter emojis de avalia√ß√£o
        avaliacoes = ["üåü", "üëç", "‚öñÔ∏è", "‚úÖ", "‚ö†Ô∏è"]
        tem_avaliacao = any(emoji in resposta for emoji in avaliacoes)
        assert tem_avaliacao, "Resposta deve conter avalia√ß√£o visual"

        print("‚úÖ Agente de uso principal do chatbot validado")

    @pytest.mark.asyncio
    async def test_scoring_avancado_uso_principal(self, page: Page, live_server):
        """
        Testa se o sistema de scoring avan√ßado est√° funcionando

        TDD: Valida que scores refletem os novos crit√©rios
        """
        # Given: Busca configurada para uso espec√≠fico
        await page.goto(
            f"{live_server}/api/buscar",
            method="POST",
            data={
                "marca_preferida": "Honda",
                "modelo_especifico": "Civic",
                "urgencia": "sem_pressa",
                "regiao": "Rio de Janeiro",
                "uso_principal": ["urbano"],
                "pessoas_transportar": 4,
                "espaco_carga": "medio",
                "potencia_desejada": "economica",
                "prioridade": "economia",
            },
        )

        # When: Sistema processa com novos crit√©rios
        # Aguardar resposta JSON
        response = await page.wait_for_response(lambda r: "buscar" in r.url)
        resultado = await response.json()

        # Then: Resultado deve conter scoring avan√ßado
        assert "recomendacoes_finais" in resultado
        assert "resumo_perfil" in resultado
        assert "sugestoes_personalizadas" in resultado

        # Verificar se perfil menciona uso urbano
        resumo = resultado["resumo_perfil"].lower()
        assert "urbano" in resumo, "Resumo deve mencionar uso urbano"

        # Verificar se sugest√µes s√£o espec√≠ficas para uso urbano
        sugestoes = " ".join(resultado["sugestoes_personalizadas"]).lower()
        urbano_keywords = ["urbano", "cidade", "compacto", "economia", "estacionamento"]
        assert any(
            keyword in sugestoes for keyword in urbano_keywords
        ), "Sugest√µes devem ser espec√≠ficas para uso urbano"

        print("‚úÖ Sistema de scoring avan√ßado validado")

    @pytest.mark.asyncio
    async def test_regressao_funcionalidade_anterior(self, page: Page, live_server):
        """
        Teste de regress√£o para garantir que funcionalidades anteriores continuam funcionando

        TDD: Garante que novas implementa√ß√µes n√£o quebraram o sistema existente
        """
        # Given: Sistema com novas implementa√ß√µes
        await page.goto(f"{live_server}/")

        # When: Executa fluxo b√°sico antigo (sem uso principal)
        await page.click('button:has-text("Come√ßar Busca")')

        # Preenche formul√°rio b√°sico
        await page.fill("#marca_preferida", "Volkswagen")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.select_option("#urgencia", "esta_semana")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.fill("#regiao", "Bras√≠lia")
        await page.click('button:has-text("Pr√≥ximo")')

        # Uso principal (nova funcionalidade deve funcionar normalmente)
        await page.wait_for_selector("#step4")
        await page.check("#uso_trabalho")  # Seleciona apenas um uso
        await page.click('button:has-text("Pr√≥ximo")')

        # Continue fluxo
        await page.fill("#pessoas_transportar", "5")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.select_option("#espaco_carga", "muito")
        await page.select_option("#potencia_desejada", "alta")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.select_option("#prioridade", "performance")
        await page.click('button:has-text("Buscar Carros")')

        # Then: Sistema deve continuar funcionando normalmente
        await page.wait_for_selector("#loading", state="visible", timeout=5000)

        # Verificar se n√£o h√° erros JavaScript
        errors = []
        page.on(
            "console",
            lambda msg: errors.append(msg.text) if msg.type == "error" else None,
        )

        # Aguardar processamento
        await asyncio.sleep(5)

        # N√£o deve haver erros cr√≠ticos
        critical_errors = [
            error
            for error in errors
            if "error" in error.lower() and "warning" not in error.lower()
        ]
        assert (
            len(critical_errors) == 0
        ), f"N√£o deve haver erros JavaScript cr√≠ticos: {critical_errors}"

        print("‚úÖ Teste de regress√£o passou - funcionalidades anteriores mantidas")

    @pytest.mark.asyncio
    async def test_performance_novo_sistema(self, page: Page, live_server):
        """
        Teste de performance para o novo sistema de uso principal

        TDD: Garante que performance n√£o degradou significativamente
        """
        import time

        # Given: Sistema com novo processamento
        start_time = time.time()

        # When: Executa busca completa
        await page.goto(f"{live_server}/")
        await page.click('button:has-text("Come√ßar Busca")')

        # Preenche rapidamente
        await page.fill("#marca_preferida", "Toyota")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.select_option("#urgencia", "sem_pressa")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.fill("#regiao", "S√£o Paulo")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.check("#uso_urbano")
        await page.check("#uso_familia")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.fill("#pessoas_transportar", "4")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.select_option("#espaco_carga", "medio")
        await page.select_option("#potencia_desejada", "economica")
        await page.click('button:has-text("Pr√≥ximo")')

        await page.select_option("#prioridade", "equilibrio")

        # Marcar tempo antes da busca
        search_start = time.time()
        await page.click('button:has-text("Buscar Carros")')

        # Aguardar resultado ou timeout
        try:
            await page.wait_for_selector("#results", state="visible", timeout=45000)
            search_end = time.time()
            search_time = search_end - search_start

            # Then: Busca deve completar em tempo razo√°vel
            assert search_time < 45, f"Busca muito lenta: {search_time:.2f}s"

            print(f"‚úÖ Performance OK - Busca completada em {search_time:.2f}s")

        except Exception as e:
            # Se timeout, ainda √© informativo
            search_time = time.time() - search_start
            print(
                f"‚ö†Ô∏è Timeout ap√≥s {search_time:.2f}s - pode indicar problema de performance"
            )
            # N√£o falha o teste, apenas reporta

        total_time = time.time() - start_time
        print(f"üìä Tempo total do teste: {total_time:.2f}s")


# Fixtures espec√≠ficas para testes de uso principal
@pytest.fixture
async def uso_principal_test_data():
    """Dados de teste espec√≠ficos para uso principal"""
    return {
        "urbano": {
            "uso_principal": ["urbano"],
            "potencia_desejada": "economica",
            "espaco_carga": "pouco",
            "prioridade": "economia",
        },
        "viagem": {
            "uso_principal": ["viagem"],
            "potencia_desejada": "media",
            "espaco_carga": "muito",
            "prioridade": "conforto",
        },
        "trabalho": {
            "uso_principal": ["trabalho"],
            "potencia_desejada": "alta",
            "espaco_carga": "muito",
            "prioridade": "equilibrio",
        },
        "familia": {
            "uso_principal": ["familia"],
            "pessoas_transportar": 6,
            "criancas": True,
            "prioridade": "seguranca",
        },
        "multiplo": {
            "uso_principal": ["urbano", "familia", "viagem"],
            "potencia_desejada": "media",
            "espaco_carga": "medio",
            "prioridade": "equilibrio",
        },
    }
