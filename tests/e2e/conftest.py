# -*- coding: utf-8 -*-
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from fastapi.testclient import TestClient


@pytest.fixture
def mock_chatbot():
    chatbot = MagicMock()

    def processar_pergunta(**kwargs):
        pergunta = kwargs.get("pergunta", "")
        pergunta_lower = pergunta.lower()

        # Roteamento por inten√ß√£o ampliado
        agente = "geral"
        if any(x in pergunta_lower for x in ["compare", "compar", " vs ", "versus"]):
            agente = "comparacao"
        elif any(x in pergunta_lower for x in ["manuten", "revis", "garantia"]):
            agente = "manutencao"
        elif any(
            x in pergunta_lower
            for x in ["pre√ßo", "preco", "financ", "parcela", "juros", "ipva", "seguro"]
        ):
            agente = "financeiro"
        elif any(
            x in pergunta_lower
            for x in [
                "consumo",
                "motor",
                "pot√™ncia",
                "potencia",
                "torque",
                "cvt",
                "c√¢mbio",
                "cambio",
                "porta-malas",
                "lugares",
                "dimens",
                "seguran√ßa",
                "seguranca",
                "airbag",
                "abs",
                "estabilidade",
            ]
        ):
            agente = "tecnico"
        elif any(x in pergunta_lower for x in ["fam√≠lia", "familia", "uso"]):
            agente = "uso_principal"
        elif any(x in pergunta_lower for x in ["pre√ßo justo", "mercado", "avalia"]):
            agente = "avaliacao"

        # Constru√ß√£o de respostas espec√≠ficas com cobertura de keywords e qualidade
        if agente == "tecnico":
            resposta_long = (
                "Analisando o aspecto t√©cnico: Sobre o Honda Civic, o motor 1.5 turbo entrega 180 cv e torque robusto. "
                "O consumo m√©dio √© de 10.8 km/l na cidade e melhor em estrada. O c√¢mbio CVT √© confi√°vel e suave. "
                "Porta-malas com 519 litros e capacidade para 5 lugares. Itens de seguran√ßa incluem airbag, ABS e controle de estabilidade."
            )
        elif agente == "financeiro":
            resposta_long = (
                "Op√ß√µes financeiras: pre√ßo de refer√™ncia em torno de 165000. Financiamento com entrada de 30000 e parcelas acess√≠veis, "
                "juros a partir de 1.99% a.m., an√°lise de cr√©dito r√°pida. Documentos (RG, CPF, comprovante de renda) e IPVA/seguro podem ser inclu√≠dos."
            )
        elif agente == "comparacao":
            resposta_long = (
                "Compara√ß√£o direta: Honda Civic vs Toyota Corolla. O Civic destaca-se em pot√™ncia (180 cv) e dirigibilidade, "
                "enquanto o Corolla oferece consumo competitivo (km/l) e manuten√ß√£o previs√≠vel. Avalie necessidades: conforto, economia e performance."
            )
        elif agente == "manutencao":
            resposta_long = (
                "Manuten√ß√£o programada: revis√µes a cada 10.000 km, troca de √≥leo e filtros, inspe√ß√£o de pastilhas. "
                "Custo de manuten√ß√£o √© competitivo e h√° garantia estendida dispon√≠vel conforme condi√ß√µes do fabricante."
            )
        elif agente == "avaliacao":
            resposta_long = (
                "Avalia√ß√£o de mercado: pre√ßo justo considerando tabela FIPE, deprecia√ß√£o e quilometragem. "
                "An√°lise sugere bom custo-benef√≠cio no cen√°rio atual, com liquidez adequada."
            )
        elif agente == "uso_principal":
            resposta_long = (
                "Para uso familiar/rotina, priorize conforto, seguran√ßa (airbag, ABS), espa√ßo interno e economia (km/l). "
                "Recomenda-se focar em porta-malas amplo e conectividade."
            )
        else:
            resposta_long = (
                "Resposta geral: analisamos consumo (km/l), desempenho (cv), seguran√ßa (airbag/ABS) e custo total. "
                "Forne√ßa mais detalhes para direcionarmos ao especialista ideal."
            )

        return {
            "resposta": resposta_long,
            "agente": agente,
            "confianca": 0.9,
            "conversation_id": (kwargs.get("conversation_id") or "e2e_conv"),
            "dados_utilizados": ["mock"],
            "sugestoes_followup": [
                "Deseja comparar com outro modelo?",
                "Quer simular financiamento?",
            ],
        }

    chatbot.processar_pergunta = MagicMock(side_effect=processar_pergunta)
    chatbot.obter_agentes_disponiveis = MagicMock(
        return_value={
            "tecnico": {
                "nome": "Agente T√©cnico",
                "emoji": "üîß",
                "especialidades": ["consumo", "motor"],
            },
            "financeiro": {"nome": "Agente Financeiro", "emoji": "üí∞"},
            "uso_principal": {"nome": "Uso Principal", "emoji": "üöó"},
            "avaliacao": {"nome": "Avaliacao", "emoji": "‚≠ê"},
            "comparacao": {"nome": "Comparacao", "emoji": "‚öñÔ∏è"},
            "manutencao": {"nome": "Manutencao", "emoji": "üõ†Ô∏è"},
        }
    )
    chatbot.obter_estatisticas_grafo = MagicMock(
        return_value={"total_nodes": 6, "status": "compiled and ready"}
    )
    return chatbot


@pytest.fixture
def mock_chatbot_client(mock_chatbot):
    with patch("app.chatbot_api.get_chatbot_graph", return_value=mock_chatbot):
        with patch("app.database.get_carros") as mock_get_carros, patch(
            "app.database.get_carro_by_id"
        ) as mock_get_carro_by_id:
            mock_get_carros.return_value = [
                {"id": 1, "marca": "Toyota", "modelo": "Corolla", "ano": 2023}
            ]
            mock_get_carro_by_id.side_effect = lambda cid: {
                "id": int(cid),
                "marca": "Toyota",
                "modelo": "Corolla",
                "ano": 2023,
            }
            from app.api import app

            yield TestClient(app)
