#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do Sistema de Mem√≥ria Persistente do FacilIAuto

Este script testa todas as funcionalidades do sistema de mem√≥ria
persistente, incluindo cria√ß√£o de conversas, persist√™ncia de mensagens,
contexto de usu√°rio e analytics.

Autor: FacilIAuto Dev Team
Data: 2024
"""

import sys
import traceback


def print_header(title: str):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 60)
    print(f"üß† {title}")
    print("=" * 60)


def print_step(step: str, status: str = ""):
    """Imprime etapa do teste"""
    status_emoji = "‚úÖ" if status == "ok" else "‚ùå" if status == "error" else "üîÑ"
    print(f"{status_emoji} {step}")


def test_memory_imports():
    """Testa importa√ß√µes do sistema de mem√≥ria"""
    print_header("TESTE DE IMPORTA√á√ïES - SISTEMA DE MEM√ìRIA")

    try:
        print_step("Importando modelos de mem√≥ria...")

        print_step("Importando gerenciador de mem√≥ria...")

        print_step("Importando API de mem√≥ria...")

        print_step("Todas as importa√ß√µes realizadas com sucesso", "ok")
        return True
    except Exception as e:
        print_step(f"Erro nas importa√ß√µes: {e}", "error")
        traceback.print_exc()
        return False


def test_memory_manager_initialization():
    """Testa inicializa√ß√£o do gerenciador de mem√≥ria"""
    print_header("TESTE DE INICIALIZA√á√ÉO - MEMORY MANAGER")

    try:
        print_step("Inicializando Memory Manager...")
        from app.memory_manager import get_memory_manager

        memory_manager = get_memory_manager()
        print_step("Memory Manager inicializado com sucesso", "ok")

        print_step("Testando singleton pattern...")
        memory_manager2 = get_memory_manager()
        is_singleton = memory_manager is memory_manager2
        print_step(
            f"Singleton pattern: {'OK' if is_singleton else 'FALHOU'}",
            "ok" if is_singleton else "error",
        )

        return memory_manager
    except Exception as e:
        print_step(f"Erro na inicializa√ß√£o: {e}", "error")
        traceback.print_exc()
        return None


def test_conversation_creation(memory_manager):
    """Testa cria√ß√£o de conversas"""
    print_header("TESTE DE CRIA√á√ÉO DE CONVERSAS")

    try:
        # Dados mock do carro
        carro_data = {
            "id": 1,
            "marca": "Toyota",
            "modelo": "Corolla",
            "ano": 2023,
            "preco": 120000,
            "categoria": "sedan",
        }

        print_step("Criando nova conversa...")
        conversation_id = memory_manager.create_conversation(
            carro_id=1, carro_data=carro_data, user_session_id="test_user_123"
        )

        print_step(f"Conversa criada com ID: {conversation_id}", "ok")

        print_step("Verificando conversa criada...")
        conversation, messages = memory_manager.get_conversation_history(
            conversation_id
        )

        if conversation:
            print_step(f"Conversa encontrada: carro_id={conversation.carro_id}", "ok")
            print_step(f"Total de mensagens: {len(messages)}", "ok")
            return conversation_id
        else:
            print_step("Conversa n√£o encontrada", "error")
            return None

    except Exception as e:
        print_step(f"Erro ao criar conversa: {e}", "error")
        traceback.print_exc()
        return None


def test_message_persistence(memory_manager, conversation_id):
    """Testa persist√™ncia de mensagens"""
    print_header("TESTE DE PERSIST√äNCIA DE MENSAGENS")

    try:
        test_messages = [
            ("user", "Qual o consumo deste carro?"),
            (
                "assistant",
                "O consumo √© de 12.5 km/l na cidade e estrada",
                "tecnico",
                0.9,
            ),
            ("user", "E o financiamento, como funciona?"),
            (
                "assistant",
                "Posso simular v√°rias op√ß√µes de financiamento para voc√™",
                "financeiro",
                0.8,
            ),
        ]

        message_ids = []

        for i, msg_data in enumerate(test_messages):
            print_step(f"Adicionando mensagem {i+1}: {msg_data[0]}")

            if msg_data[0] == "user":
                message_id = memory_manager.add_message(
                    conversation_id=conversation_id,
                    message_type="user",
                    content=msg_data[1],
                )
            else:
                message_id = memory_manager.add_message(
                    conversation_id=conversation_id,
                    message_type="assistant",
                    content=msg_data[1],
                    agent_used=msg_data[2],
                    confidence_score=msg_data[3],
                    processing_time_ms=150,
                    data_sources=["especificacoes_tecnicas"],
                    followup_suggestions=["Quer saber sobre manuten√ß√£o?"],
                )

            message_ids.append(message_id)
            print_step(f"Mensagem adicionada com ID: {message_id}", "ok")

        print_step("Verificando mensagens persistidas...")
        conversation, messages = memory_manager.get_conversation_history(
            conversation_id
        )

        print_step(f"Total de mensagens recuperadas: {len(messages)}", "ok")
        print_step(f"Agente prim√°rio da conversa: {conversation.primary_agent}", "ok")

        return len(messages) == len(test_messages)

    except Exception as e:
        print_step(f"Erro ao persistir mensagens: {e}", "error")
        traceback.print_exc()
        return False


def test_context_extraction(memory_manager, conversation_id):
    """Testa extra√ß√£o e persist√™ncia de contexto"""
    print_header("TESTE DE EXTRA√á√ÉO DE CONTEXTO")

    try:
        print_step("Adicionando contexto manual...")

        context_id = memory_manager.add_context(
            conversation_id=conversation_id,
            context_type="preference",
            context_key="feature_interest",
            context_value="economia",
            confidence=0.8,
        )

        print_step(f"Contexto adicionado com ID: {context_id}", "ok")

        print_step("Testando extra√ß√£o autom√°tica de contexto...")
        memory_manager._extract_and_persist_context(
            conversation_id=conversation_id,
            user_message="Preciso de um carro Toyota econ√¥mico para comprar hoje",
            agent_used="tecnico",
        )

        print_step("Contexto extra√≠do automaticamente", "ok")
        return True

    except Exception as e:
        print_step(f"Erro ao extrair contexto: {e}", "error")
        traceback.print_exc()
        return False


def test_user_context(memory_manager):
    """Testa recupera√ß√£o de contexto do usu√°rio"""
    print_header("TESTE DE CONTEXTO DO USU√ÅRIO")

    try:
        print_step("Recuperando contexto do usu√°rio...")

        user_context = memory_manager.get_user_context("test_user_123")

        print_step(
            f"Conversas recentes: {user_context.get('recent_conversations', 0)}", "ok"
        )
        print_step(
            f"Agentes preferidos: {user_context.get('preferred_agents', {})}", "ok"
        )
        print_step(
            f"Marcas de interesse: {user_context.get('brand_preferences', [])}", "ok"
        )

        return True

    except Exception as e:
        print_step(f"Erro ao recuperar contexto: {e}", "error")
        traceback.print_exc()
        return False


def test_langgraph_memory_integration():
    """Testa integra√ß√£o com LangGraph"""
    print_header("TESTE DE INTEGRA√á√ÉO LANGGRAPH + MEM√ìRIA")

    try:
        print_step("Importando LangGraph atualizado...")
        from app.langgraph_chatbot_graph import get_chatbot_graph

        print_step("Criando dados de teste...")
        carro_data = {
            "id": 2,
            "marca": "Honda",
            "modelo": "Civic",
            "ano": 2023,
            "preco": 140000,
            "categoria": "sedan",
            "consumo": 11.8,
            "potencia": 174,
        }

        print_step("Processando pergunta com mem√≥ria...")
        chatbot_graph = get_chatbot_graph()

        resultado = chatbot_graph.processar_pergunta(
            carro_id=2,
            carro_data=carro_data,
            pergunta="Qual a pot√™ncia deste Honda Civic?",
            user_session_id="test_user_integration",
        )

        print_step(f"Resposta gerada: {len(resultado.get('resposta', ''))} chars", "ok")
        print_step(f"Agente usado: {resultado.get('agente', 'N/A')}", "ok")
        print_step(f"Conversation ID: {resultado.get('conversation_id', 'N/A')}", "ok")

        return True

    except Exception as e:
        print_step(f"Erro na integra√ß√£o: {e}", "error")
        traceback.print_exc()
        return False


def test_analytics_system(memory_manager):
    """Testa sistema de analytics"""
    print_header("TESTE DE SISTEMA DE ANALYTICS")

    try:
        print_step("Gerando analytics...")

        analytics = memory_manager.get_conversation_analytics(days=7)

        print_step(
            f"Total de conversas (7 dias): {analytics.get('total_conversations', 0)}",
            "ok",
        )
        print_step(
            f"Total de mensagens (7 dias): {analytics.get('total_messages', 0)}", "ok"
        )
        print_step(
            f"M√©dia de mensagens por conversa: {analytics.get('avg_messages_per_conversation', 0)}",
            "ok",
        )
        print_step(f"Uso por agente: {analytics.get('agent_usage', {})}", "ok")

        return True

    except Exception as e:
        print_step(f"Erro ao gerar analytics: {e}", "error")
        traceback.print_exc()
        return False


def test_similar_conversations(memory_manager):
    """Testa busca de conversas similares"""
    print_header("TESTE DE CONVERSAS SIMILARES")

    try:
        print_step("Buscando conversas similares...")

        similar_convs = memory_manager.get_similar_conversations(carro_id=1, limit=5)

        print_step(f"Conversas similares encontradas: {len(similar_convs)}", "ok")

        for i, (conv, messages) in enumerate(similar_convs):
            print_step(
                f"  Conversa {i+1}: {conv.total_messages} mensagens, agente: {conv.primary_agent}",
                "ok",
            )

        return True

    except Exception as e:
        print_step(f"Erro ao buscar conversas similares: {e}", "error")
        traceback.print_exc()
        return False


def run_comprehensive_memory_test():
    """Executa todos os testes do sistema de mem√≥ria"""
    print_header("SISTEMA DE TESTE - MEM√ìRIA PERSISTENTE FACILIAUTO")
    print("üß† Iniciando bateria completa de testes de mem√≥ria...")

    # Contador de sucessos
    test_results = {
        "imports": False,
        "initialization": False,
        "conversation_creation": False,
        "message_persistence": False,
        "context_extraction": False,
        "user_context": False,
        "langgraph_integration": False,
        "analytics": False,
        "similar_conversations": False,
    }

    # 1. Teste de importa√ß√µes
    test_results["imports"] = test_memory_imports()
    if not test_results["imports"]:
        print("‚ùå Falha cr√≠tica nas importa√ß√µes. Interrompendo testes.")
        return test_results

    # 2. Teste de inicializa√ß√£o
    memory_manager = test_memory_manager_initialization()
    test_results["initialization"] = memory_manager is not None
    if not test_results["initialization"]:
        print("‚ùå Falha cr√≠tica na inicializa√ß√£o. Interrompendo testes.")
        return test_results

    # 3. Teste de cria√ß√£o de conversas
    conversation_id = test_conversation_creation(memory_manager)
    test_results["conversation_creation"] = conversation_id is not None

    # 4. Teste de persist√™ncia de mensagens
    if conversation_id:
        test_results["message_persistence"] = test_message_persistence(
            memory_manager, conversation_id
        )

        # 5. Teste de extra√ß√£o de contexto
        test_results["context_extraction"] = test_context_extraction(
            memory_manager, conversation_id
        )

    # 6. Teste de contexto do usu√°rio
    test_results["user_context"] = test_user_context(memory_manager)

    # 7. Teste de integra√ß√£o com LangGraph
    test_results["langgraph_integration"] = test_langgraph_memory_integration()

    # 8. Teste de analytics
    test_results["analytics"] = test_analytics_system(memory_manager)

    # 9. Teste de conversas similares
    test_results["similar_conversations"] = test_similar_conversations(memory_manager)

    return test_results


def print_memory_final_report(test_results):
    """Imprime relat√≥rio final dos testes de mem√≥ria"""
    print_header("RELAT√ìRIO FINAL - SISTEMA DE MEM√ìRIA")

    total_tests = len(test_results)
    passed_tests = sum(test_results.values())
    success_rate = (passed_tests / total_tests) * 100

    print("üß† **ESTAT√çSTICAS DE MEM√ìRIA:**")
    print(f"   Total de testes: {total_tests}")
    print(f"   Testes aprovados: {passed_tests}")
    print(f"   Taxa de sucesso: {success_rate:.1f}%")
    print()

    print("üìã **RESULTADOS DETALHADOS:**")
    for test_name, result in test_results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {test_name.replace('_', ' ').title()}: {status}")

    print()

    if success_rate >= 90:
        print("üéâ **RESULTADO: EXCELENTE!**")
        print("   Sistema de Mem√≥ria Persistente funcionando perfeitamente!")
        print("   Pronto para produ√ß√£o com PostgreSQL! üöÄ")
    elif success_rate >= 70:
        print("üëç **RESULTADO: BOM**")
        print("   Sistema de Mem√≥ria funcional com pequenos ajustes necess√°rios.")
        print("   Revisar testes que falharam.")
    else:
        print("‚ö†Ô∏è **RESULTADO: REQUER ATEN√á√ÉO**")
        print("   Sistema de Mem√≥ria precisa de corre√ß√µes.")
        print("   Verificar conex√£o com banco de dados.")

    print("\n" + "=" * 60)


if __name__ == "__main__":
    try:
        # Executar todos os testes de mem√≥ria
        results = run_comprehensive_memory_test()

        # Imprimir relat√≥rio final
        print_memory_final_report(results)

        # Exit code baseado no resultado
        success_rate = (sum(results.values()) / len(results)) * 100
        sys.exit(0 if success_rate >= 70 else 1)

    except KeyboardInterrupt:
        print("\nüõë Testes de mem√≥ria interrompidos pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erro cr√≠tico durante os testes de mem√≥ria: {e}")
        traceback.print_exc()
        sys.exit(1)
